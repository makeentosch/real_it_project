# -*- coding: utf-8 -*-
"""keywords.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TSZ4luvbydEaBCcDb-mjqHLvTh7wFRTM

# Использование нейросети BERT для поиска ключевых слов из вопроса клиента (не работает в связи с маленьким объемом текста)
"""

!pip install transformers

from transformers import BertForQuestionAnswering, BertTokenizer
import torch

# Загрузка предварительно обученной модели и токенизатора
model = BertForQuestionAnswering.from_pretrained('bert-large-uncased-whole-word-masking-finetuned-squad')
tokenizer = BertTokenizer.from_pretrained('bert-large-uncased-whole-word-masking-finetuned-squad')

# Вопрос и контекст
question = "Какова стоимость лагеря?"
context = "Стоимость лагеря для детей 8 лет составляет 60 тыс. рублей за 1 месяц."

# Токенизация входных данных
inputs = tokenizer(question, context, return_tensors='pt')

# Получение ответа от модели
outputs = model(**inputs)

# Извлечение ответа
answer_start = torch.argmax(outputs.start_logits)
answer_end = torch.argmax(outputs.end_logits) + 1

answer = tokenizer.convert_tokens_to_string(tokenizer.convert_ids_to_tokens(inputs['input_ids'][0][answer_start:answer_end]))

print(answer)

"""Как мы видим, BERT справляется плохо. Связано это с тем, что длина вопроса слишком коротка, и ключевые слова выделить из контекста очень сложно.

#  Библиотека nltk для токенизации и удаления стоп-слов и знаков пунктуации + приведение слов к инфинитиву с помощью pymorphy2
"""

!pip install pymorphy2

import string
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import pymorphy2

nltk.download('punkt')
nltk.download('stopwords')
stop_words = set(stopwords.words('russian'))

morph = pymorphy2.MorphAnalyzer()

def extract_keywords(text):
  word_tokens = word_tokenize(text)
  keywords = [morph.parse(word)[0].normal_form
              for word in word_tokens
              if not word in stop_words and not word in string.punctuation]
  return keywords

extract_keywords("Радиодетали")

"""# Исправление орфографических ошибок в вопросе (работает некорректно)"""

!pip install pymorphy2 pyspellchecker

import pymorphy2
from spellchecker import SpellChecker

morph = pymorphy2.MorphAnalyzer()
spell = SpellChecker(language='ru')

words = question.split()

corrected_words = []
for word in words:
    corrected_word = spell.correction(word)
    if corrected_word is not None:
        normal_form = morph.parse(corrected_word)[0].normal_form
        corrected_words.append(normal_form)
    else:
        corrected_words.append(word)

question = ' '.join(corrected_words)
question

"""# Подключение к БД"""

import sqlite3

conn = sqlite3.connect("real_it.db")
c = conn.cursor()

"""# Создание промпта и контекста для нейросети

Словарь, хранящий контекст диалога
"""

context = dict()
question_num = 0
answer_num = 0

def make_prompt(text):
  prompt = "Ты опрератор на сайте школы программирования, общающийся с клиентами. Веди диалог дружелюбно. Проанализируй контекст диалога: " + "\n"
  for key, value in context.items():
    prompt += f"{key} {value}" + "\n"
  prompt += "Сформируй очередной ответ на основе последнего вопроса, используя следующую информацию: " + text
  return prompt

def make_answer(answer):
  global answer_num
  answer_num += 1
  context[f"Ответ {answer_num}"] = answer

def make_question(question):
  global question_num
  question_num += 1
  context[f"Вопрос {question_num}"] = question

"""# Обработка вопроса клиента"""

question = "На каком филиале есть курс по программированию?"
make_question(question)
context

keywords = extract_keywords(question)
keywords

"""# Извлечение информации из вопроса клиента

**Шаг №1 - Узнать город**
"""

def get_city(question):
  query = "SELECT DISTINCT City FROM Courses"
  c.execute(query)
  cities = []
  for city in c.fetchall():
    cities.append(city[0].lower())
  for word in question:
    if word in cities:
      return word.capitalize()
  return None

"""Проверяем, узнали ли мы город у клиента"""

city = get_city(keywords)
if city is None:
  make_answer("Укажите, пожалуйста, из какого вы города?")
else:
  print(city)

"""**Шаг №2 - Определить предмет вопроса**"""

subjects = {
  "курс": dict(),
  # "лагерь": dict(),
  "филиал": dict(),
  "абонемент": dict()
}

"""Добавление сутей к каждому предмету вопросов"""

subjects["курс"] = {
  "наличие": False,
  "периодичность": False,
  "формат": False,
  "цена": False,
  "длительность": False
}
# subjects["лагерь"] = {
#   "наличие": False,
#   "стоимость": False
# }
subjects["филиал"] = {
  "наличие": False,
  "адрес": False
}
subjects["абонемент"] = {
  "наличие": False,
  "цена": False
}

"""Определение предмета вопроса"""

def get_question_subject(question):
  # Вспомогательный словарь с ключевыми словами
  subjects_kw = {
      "курс": ["курс", "обучение", "занятие", "урок"],
      # "лагерь": ["лагерь"],
      "филиал": ["адрес", "расположение", "находиться", "располагаться", "филиал"],
      "абонемент": ["абонемент", "скидка"]
  }

  for word in question:
    for key, value in subjects_kw.items():
      if word in value:
        return key
  return None

question_subject = get_question_subject(keywords)
print(question_subject)

"""**Шаг №3 - Определить суть вопроса**"""

def get_question_essence(question):
  # Вспомогательный словарь с ключевыми словами
  essence_kw = {
      "наличие": ["есть", "иметься", "присутствовать"],
      "цена": ["стоить", "цена", "прайс", "рубль", "стоимость", "оплата", "платить", "оплатить"],
      "формат": ["форма", "очно", "онлайн", "дистант", "дистанционный"],
      "периодичность": ["периодичность", "раз", "неделя"],
      "адрес": ["адрес", "расположение", "находиться", "располагаться"]
  }

  for word in question:
    for key, value in essence_kw.items():
      if word in value and key in subjects[question_subject].keys():
        subjects[question_subject][key] = True
        return key
  return None

question_essence = get_question_essence(keywords)
print(question_essence)

"""Сопоставление всей полученной информации"""

print(f"Вопрос: {question}\nГород: {city}\nПредмет вопроса: {question_subject}\nСуть вопроса: {question_essence}")

"""# Получение данных из БД на основе вопроса клиента

Если предмет вопроса - курс, то извлекаем всю информацию о нём из БД
"""

def get_course_info(keyword):
  query = f"SELECT * FROM Courses WHERE City = '{city}' AND Keywords LIKE '%{keyword}%'"
  c.execute(query)
  return c.fetchall()

"""Если предмет вопроса - филиал, то извлекаем всю информацию о них из БД"""

def get_branches_info():
  query = f"SELECT DISTINCT Branches FROM Courses WHERE City = '{city}'"
  c.execute(query)
  data = c.fetchall()
  data = list(data[0])
  data = data[0].split("; ")

  result = []
  for branch in data:
      result.append(extract_keywords(branch))

  return result

"""Если предмет вопроса - абонемент, то извлекаем информацию о нем из БД"""

def get_subscription_info():
  query = f"SELECT Title, FullPrice, LessonPrice FROM Prices WHERE City = '{city}' AND CourseType = 'Основной'"
  c.execute(query)
  data = c.fetchall()
  return data

def answer_about_course_availability(question):
  data = tuple()
  for word in question:
    temp_data = get_course_info(word)
    if temp_data != []:
      data = temp_data
  if len(data) == 0:
    return False
  return True

def answer_about_course_price(question):
  data = tuple()
  for word in question:
    temp_data = get_subscription_info()
    if temp_data != []:
      data = temp_data
      break
  return data

def answer_about_course_periodicity():
  query = f"SELECT DISTINCT Periodicity FROM Courses WHERE City = '{city}'"
  c.execute(query)
  data = c.fetchall()[0]
  return data[0]

def answer_about_course_format():
  query = f"SELECT DISTINCT Format FROM Courses WHERE City = '{city}'"
  c.execute(query)
  data = c.fetchall()[0]
  return data[0]

data = tuple()

match question_subject:
  case "курс":
    match question_essence:
      case "наличие":
        if answer_about_course_availability(keywords):
          make_answer("Курс имеется")
        else:
          make_answer("Такого курса нет")
      case "цена":
        data = []
        prices = answer_about_course_price(keywords)
        for price in prices:
          data.append(f"{price[0]}, полная цена: {price[1]}, цена за одно занятие: {price[2]}")
        make_answer(data)
      case "периодичность":
        data = answer_about_course_periodicity()
        if data is None:
          make_answer("Не могу ответить :( Перевожу на оператора...")
        else:
          make_answer(data)
      case "формат":
        data = answer_about_course_format()
        if data is None:
          make_answer("Не могу ответить :( Перевожу на оператора...")
        else:
          make_answer(data)


  # case "лагерь":
  #   pass

  case "филиал":
    match question_essence:
      case "наличие":
        flag = True
        data = get_branches_info()
        for word in keywords:
          for branch in data:
            if word in branch:
              make_answer("Филиал по данному адресу имеется")
              flag = False
        if flag:
          make_answer("Филиала по данному адресу нет")

  case "абонемент":
    pass

context